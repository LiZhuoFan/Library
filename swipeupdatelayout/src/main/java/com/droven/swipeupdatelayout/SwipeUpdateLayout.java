package com.droven.swipeupdatelayout;import android.annotation.SuppressLint;import android.content.Context;import android.content.res.TypedArray;import android.support.annotation.NonNull;import android.support.v4.view.ViewCompat;import android.support.v4.widget.ViewDragHelper;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.util.AttributeSet;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import com.droven.swipeupdatelayout.base.BaseComponentView;import com.droven.swipeupdatelayout.base.BaseEmptyView;import com.droven.swipeupdatelayout.base.BaseLoadingView;import com.droven.swipeupdatelayout.base.BaseRefreshView;public class SwipeUpdateLayout extends ViewGroup {    private static final int REFRESH_MODE_TOP = 1;    private static final int REFRESH_MODE_BOTTOM = 2;    private BaseRefreshView headerView, footerView;    private BaseEmptyView emptyView;    private BaseLoadingView loadingView;    private RecyclerView dataView;    private ViewDragHelper mViewDragHelper;    private OnRefreshListener onRefreshListener;    private OnLoadMoreListener onLoadMoreListener;    private OnReloadListener onReloadListener;    private int refreshMode;    private boolean isRefreshing = false;    private int moveTop = 0;    private boolean isLoading = false;    private boolean isFail = false;    private boolean needChangeOtherViewPosition = true;    private boolean refreshEnable = true, loadMoreEnable = true;    public SwipeUpdateLayout(Context context) {        this(context, null);    }    public SwipeUpdateLayout(Context context, AttributeSet attrs) {        this(context, attrs, 0);    }    public SwipeUpdateLayout(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);        initView(context, attrs);    }    private void initView(Context context, AttributeSet attrs) {        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.SwipeUpdateLayout);        String loadingViewClass = typedArray.getString(R.styleable.SwipeUpdateLayout_loadingView);        String emptyViewClass = typedArray.getString(R.styleable.SwipeUpdateLayout_emptyView);        String headerViewClass = typedArray.getString(R.styleable.SwipeUpdateLayout_headerView);        String footerViewClass = typedArray.getString(R.styleable.SwipeUpdateLayout_footerView);        typedArray.recycle();        loadingView = createChildView(context, attrs, loadingViewClass, BaseLoadingView.class);        if (loadingView != null) {            addView(loadingView.inflateView(context, this));        }        emptyView = createChildView(context, attrs, emptyViewClass, BaseEmptyView.class);        if (emptyView != null) {            addView(emptyView.inflateView(context, this));            final View[] clickedViews = emptyView.clickToReloadView();            if (clickedViews != null) {                for (View view : clickedViews) {                    view.setOnClickListener(reloadListener);                }            }        }        headerView = createChildView(context, attrs, headerViewClass, BaseRefreshView.class);        if (headerView != null) {            addView(headerView.inflateView(context, this));        }        footerView = createChildView(context, attrs, footerViewClass, BaseRefreshView.class);        if (footerView != null) {            addView(footerView.inflateView(context, this));        }        dataView = new RecyclerView(context);        dataView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));        dataView.setLayoutManager(new LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false));//        dataView.setOverScrollMode(OVER_SCROLL_NEVER);        addView(dataView);        mViewDragHelper = ViewDragHelper.create(this, 1.0f, mDragCallback);    }    private <T> T createChildView(Context context, AttributeSet attrs, String className, Class<? extends T> baseClass) {        if (className != null) {            className = className.trim();            if (!className.isEmpty()) {                className = getFullClassName(context, className);                ClassLoader classLoader;                if (isInEditMode()) {                    // Stupid layoutlib cannot handle simple class loaders.                    classLoader = this.getClass().getClassLoader();                } else {                    classLoader = context.getClassLoader();                }                try {                    Class<? extends T> childViewClass = classLoader.loadClass(className).asSubclass(baseClass);                    return childViewClass.newInstance();                } catch (ClassNotFoundException e) {                    throw new IllegalStateException(attrs.getPositionDescription()                            + ": Unable to find LayoutManager " + className, e);                } catch (IllegalAccessException e) {                    throw new IllegalStateException(attrs.getPositionDescription()                            + ": Cannot access non-public constructor " + className, e);                } catch (InstantiationException e) {                    throw new IllegalStateException(attrs.getPositionDescription()                            + ": Could not instantiate the LayoutManager: " + className, e);                }            }        }        return null;    }    private String getFullClassName(Context context, String className) {        if (className.charAt(0) == '.') {            return context.getPackageName() + className;        }        if (className.contains(".")) {            return className;        }        return SwipeUpdateLayout.class.getPackage().getName() + ".view." + className;    }    private OnClickListener reloadListener = new OnClickListener() {        @Override        public void onClick(View v) {            if (onReloadListener != null) {                isFail = false;                if (loadingView != null) {                    loadingView.onLoading();                    isLoading = true;                    requestLayout();                }                onReloadListener.onReload();            }        }    };    @Override    protected void onFinishInflate() {        super.onFinishInflate();        if (loadingView != null) {            loadingView.onLoading();            isLoading = true;        }    }    @Override    public LayoutParams generateLayoutParams(AttributeSet attrs) {        return new MarginLayoutParams(getContext(), attrs);    }    @Override    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        if (isFail) {            //显示错误信息            measureEmptyView(widthMeasureSpec, heightMeasureSpec);        } else if (dataView.getAdapter() == null || isLoading) {            //加载中            measureLoadingView(widthMeasureSpec, heightMeasureSpec);        } else if (dataView.getAdapter().getItemCount() > 0) {            //RecyclerView有item            measureDataView(widthMeasureSpec, heightMeasureSpec);        } else {            //空数据            measureEmptyView(widthMeasureSpec, heightMeasureSpec);        }//        measureChildren(widthMeasureSpec, heightMeasureSpec);        int width = MeasureSpec.getSize(widthMeasureSpec);        int height = MeasureSpec.getSize(heightMeasureSpec);        setMeasuredDimension(width, height);    }    private void measureLoadingView(int widthMeasureSpec, int heightMeasureSpec) {        measureChild(loadingView, widthMeasureSpec, heightMeasureSpec);        measureChild(emptyView, 0, 0);        measureChild(headerView, 0, 0);        measureChild(footerView, 0, 0);        measureChild(dataView, 0, 0);    }    private void measureEmptyView(int widthMeasureSpec, int heightMeasureSpec) {        if (loadingView != null) {            loadingView.onLoadFinished();            measureChild(loadingView.getView(), 0, 0);        }        if (emptyView != null) {            if (!isFail) {                emptyView.onEmpty();            }            measureChild(emptyView.getView(), widthMeasureSpec, heightMeasureSpec);        }        measureChild(headerView, 0, 0);        measureChild(footerView, 0, 0);        measureChild(dataView, 0, 0);    }    private void measureDataView(int widthMeasureSpec, int heightMeasureSpec) {        if (loadingView != null) {            loadingView.onLoadFinished();            measureChild(loadingView.getView(), 0, 0);        }        measureChild(emptyView, 0, 0);        measureChild(headerView, widthMeasureSpec, heightMeasureSpec);        measureChild(footerView, widthMeasureSpec, heightMeasureSpec);        measureChild(dataView, widthMeasureSpec, heightMeasureSpec);    }    private void measureChild(BaseComponentView baseView, int parentWidthMeasureSpec, int parentHeightMeasureSpec) {        if (baseView != null) {            measureChild(baseView.getView(), parentWidthMeasureSpec, parentHeightMeasureSpec);        }    }    @Override    protected void onLayout(boolean changed, int l, int t, int r, int b) {        needChangeOtherViewPosition = false;        if (isFail) {            //显示错误信息            layoutEmptyView(l, t, r, b);            isFail = false;        } else if (dataView.getAdapter() == null || isLoading) {            //加载中            layoutLoadingView(l, t, r, b);            isLoading = false;        } else if (dataView.getAdapter().getItemCount() > 0) {            //RecyclerView有item            layoutDataView(l, t, r, b);        } else {            //空数据            layoutEmptyView(l, t, r, b);        }    }    private void layoutLoadingView(int l, int t, int r, int b) {        if (loadingView != null) {            final int eL = l + ((getMeasuredWidth() - loadingView.getView().getMeasuredWidth()) / 2);            final int eT = t + ((getMeasuredHeight() - loadingView.getView().getMeasuredHeight()) / 2);            loadingView.getView().layout(eL, eT, eL + loadingView.getView().getMeasuredWidth(), eT + loadingView.getView().getMeasuredHeight());        }        layoutChildToZero(emptyView);        layoutChildToZero(headerView);        layoutChildToZero(footerView);        dataView.layout(0, 0, 0, 0);    }    private void layoutEmptyView(int l, int t, int r, int b) {        layoutChildToZero(loadingView);        if (emptyView != null) {            final int eL = l + ((getMeasuredWidth() - emptyView.getView().getMeasuredWidth()) / 2);            final int eT = t + ((getMeasuredHeight() - emptyView.getView().getMeasuredHeight()) / 2);            emptyView.getView().layout(eL, eT, eL + emptyView.getView().getMeasuredWidth(), eT + emptyView.getView().getMeasuredHeight());        }        layoutChildToZero(headerView);        layoutChildToZero(footerView);        dataView.layout(0, 0, 0, 0);    }    private void layoutDataView(int l, int t, int r, int b) {        layoutChildToZero(loadingView);        layoutChildToZero(emptyView);        if (headerView != null) {            headerView.getView().layout(l, moveTop - headerView.getView().getMeasuredHeight(),                    l + headerView.getView().getMeasuredWidth(), moveTop);        }        dataView.layout(l, moveTop, l + dataView.getMeasuredWidth(), moveTop + dataView.getMeasuredHeight());        if (footerView != null) {            if (dataView.getMeasuredHeight() >= getMeasuredHeight()) {                footerView.getView().layout(l, moveTop + dataView.getMeasuredHeight(), l + footerView.getView().getMeasuredWidth(),                        moveTop + dataView.getMeasuredHeight() + footerView.getView().getMeasuredHeight());            } else {                footerView.getView().layout(0, 0, 0, 0);            }        }    }    private void layoutChildToZero(BaseComponentView baseView) {        if (baseView != null) {            baseView.getView().layout(0, 0, 0, 0);        }    }    @Override    public boolean onInterceptTouchEvent(MotionEvent ev) {        return mViewDragHelper.shouldInterceptTouchEvent(ev);    }    private ViewDragHelper.Callback mDragCallback = new ViewDragHelper.Callback() {        private boolean isRelease;        @Override        public boolean tryCaptureView(@NonNull View child, int pointerId) {            return child == dataView && !isRefreshing;        }        @Override        public void onViewCaptured(@NonNull View capturedChild, int activePointerId) {            super.onViewCaptured(capturedChild, activePointerId);            isRelease = false;            needChangeOtherViewPosition = true;        }        @Override        public int clampViewPositionVertical(@NonNull View child, int top, int dy) {            if (!isRefreshing) {                if (top > 0 && !child.canScrollVertically(-1) && onRefreshListener != null && refreshEnable && headerView != null) {                    refreshMode = REFRESH_MODE_TOP;                    return headerView.clampViewPositionVertical(top);                }                if (top < 0 && !child.canScrollVertically(1) && loadMoreEnable && footerView != null && onLoadMoreListener != null) {                    if (child instanceof ViewGroup) {                        final ViewGroup viewGroup = (ViewGroup) child;                        int childTotalHeight = 0;                        for (int i = 0; i < viewGroup.getChildCount(); i++) {                            childTotalHeight += viewGroup.getChildAt(i).getMeasuredHeight();                            if (childTotalHeight >= getMeasuredHeight()) {                                refreshMode = REFRESH_MODE_BOTTOM;                                return footerView.clampViewPositionVertical(top);                            }                        }                    } else if (child.getMeasuredHeight() >= getMeasuredHeight()) {                        refreshMode = REFRESH_MODE_BOTTOM;                        return footerView.clampViewPositionVertical(top);                    }                }            }            return super.clampViewPositionVertical(child, top, dy);        }        @Override        public void onViewReleased(@NonNull View releasedChild, float xvel, float yvel) {            isRelease = true;            if (refreshMode == REFRESH_MODE_TOP) {                if (releasedChild.getTop() > headerView.canRefreshHeight()) {                    headerView.onRefreshing();                    mViewDragHelper.settleCapturedViewAt(releasedChild.getLeft(), headerView.canRefreshHeight());                    invalidate();                    isRefreshing = true;                    onRefreshListener.onRefresh();                    return;                }            } else if (refreshMode == REFRESH_MODE_BOTTOM) {                if (Math.abs(releasedChild.getTop()) > footerView.canRefreshHeight()) {                    footerView.onRefreshing();                    mViewDragHelper.settleCapturedViewAt(releasedChild.getLeft(), -footerView.canRefreshHeight());                    invalidate();                    isRefreshing = true;                    onLoadMoreListener.onLoadMore();                    return;                }            }            mViewDragHelper.settleCapturedViewAt(releasedChild.getLeft(), 0);            invalidate();        }        @Override        public int getViewVerticalDragRange(@NonNull View child) {            return 1;        }        @Override        public void onViewPositionChanged(@NonNull View changedView, int left, int top, int dx, int dy) {            moveTop = top;            if (isRelease || needChangeOtherViewPosition) {                if (headerView != null) {                    headerView.changeViewPosition(top, dy);                }                if (footerView != null) {                    footerView.changeViewPosition(top, dy);                }            }        }    };    @Override    public void computeScroll() {        if (mViewDragHelper.continueSettling(true)) {            invalidate();        } else {            super.computeScroll();        }    }    @SuppressLint("ClickableViewAccessibility")    @Override    public boolean onTouchEvent(MotionEvent event) {        mViewDragHelper.processTouchEvent(event);        return true;    }    public void setAdapter(RecyclerView.Adapter adapter) {        dataView.setAdapter(adapter);    }    public RecyclerView getDataView() {        return dataView;    }    private Runnable completeRunnable = new Runnable() {        @Override        public void run() {            if (mViewDragHelper.smoothSlideViewTo(dataView, dataView.getLeft(), 0)) {                ViewCompat.postInvalidateOnAnimation(SwipeUpdateLayout.this);                isRefreshing = false;            }        }    };    public void loadComplete() {        if (isRefreshing) {            postDelayed(completeRunnable, 500);            if (refreshMode == REFRESH_MODE_TOP) {                if (headerView != null)                    headerView.onComplete();            } else if (refreshMode == REFRESH_MODE_BOTTOM) {                if (footerView != null)                    footerView.onComplete();            }        }    }    public void loadFail(String msg) {        isFail = true;        isLoading = false;        if (loadingView != null) {            loadingView.onLoadFinished();        }        if (emptyView != null) {            emptyView.onFail(msg);        }        requestLayout();    }    public void setRefreshEnable(boolean refreshEnable) {        this.refreshEnable = refreshEnable;    }    public void setLoadMoreEnable(boolean loadMoreEnable) {        this.loadMoreEnable = loadMoreEnable;    }    public void setOnRefreshListener(OnRefreshListener onRefreshListener) {        this.onRefreshListener = onRefreshListener;    }    public void setOnLoadMoreListener(OnLoadMoreListener onLoadMoreListener) {        this.onLoadMoreListener = onLoadMoreListener;    }    public void setOnReloadListener(OnReloadListener onReloadListener) {        this.onReloadListener = onReloadListener;    }    public interface OnRefreshListener {        void onRefresh();    }    public interface OnLoadMoreListener {        void onLoadMore();    }    public interface OnReloadListener {        void onReload();    }}